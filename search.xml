<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[svg和canvas及css3动画研究]]></title>
    <url>%2F2018%2F07%2F05%2Fsvg-and-canvas%2F</url>
    <content type="text"><![CDATA[动画补间动画 【查看demo】 所谓补间动画又叫做中间帧动画，渐变动画，只要建立起始和结束的画面，中间部分由软件自动生成，省去了中间动画制作的复杂过程 常见的实现补间动画以下几种形式： CSS3 Animation,通过animation(除steps()以外的时间函数)属性在每个关键帧之间插入补间动画。了解一下 animation: name duration timing-function delay iteration-count direction fill-mode play-state; // animation-name 指定要绑定到选择器的关键帧的名称 // animation-duration 动画指定需要多少秒或毫秒完成 负值 // animation-timing-function 设置动画将如何完成一个周期 linear ease cubic-bezier(n,n,n,n) // animation-delay 设置动画在启动前的延迟间隔。 // animation-iteration-count 定义动画的播放次数。 // animation-direction 指定是否应该轮流反向播放动画。 // animation-fill-mode 规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式。 forwards backwards both // animation-play-state 指定动画是否正在运行或已暂停。 running paused keyframes name { from{} to{} } CSS3 Transition，区别于animation，transition只能设定初始和结束时刻的两个关键帧状态。 transition: property duration timing-function delay; // transition-property 规定设置过渡效果的 CSS 属性的名称,列表以逗号分隔。 // transition-duration 规定完成过渡效果需要多少秒或毫秒。 // transition-timing-function 规定速度效果的速度曲线。 // transition-delay 定义过渡效果何时开始。 transition的优点在于简单易用，但是它有几个很大的局限。 （1）transition需要事件触发，所以没法在网页加载时自动发生。 （2）transition是一次性的，不能重复发生，除非一再触发。 （3）transition只能定义开始状态和结束状态，不能定义中间状态，也就是说只有两个状态。 （4）一条transition规则，只能定义一个属性的变化，不能涉及多个属性。 JavaScript实现动画，如JavaScript动画库或框架，著名的TweenJS，它是CreateJS的其中一个套件。了解一下 SVG 动画,考虑到高版本现代浏览器对SVG技术的友好的支持性，利用SVG技术实现动画也是一种可行的方案。了解一下&lt;animate attributeName=&quot;width&quot; attributeType=&quot;XML&quot; from=&quot;200&quot; to=&quot;20&quot; begin=&quot;0s&quot; dur=&quot;5s&quot; repeatDur=&quot;10&quot; repeatCount=&quot;2&quot; fill=&quot;freeze&quot; /&gt; // attributeName 定义发生变化的元素属性名 // attributeType XML CSS // from&amp;to&amp;by from和to分别定义发生变化的属性的初始值和终止值。from可缺省，表示初始值即为&lt;animate&gt;父元素相应的属性值。可用by替换to，表示变化偏移量。可以理解为to = from + by。 // begin &amp; dur &amp; end begin定义动画开始时间；dur定义动画所需时间；end定义动画终止时间。时间单位h：小时；min：分钟；s：秒；ms：毫秒。默认时间单位为s // fill 当fill=&quot;freeze&quot;时，动画终止时，发生变化的元素属性值停留在动画终止时的状态；当fill=&quot;remove&quot;时，动画终止时，发生变化的元素属性值回复到动画起始时的状态。 tips:动画要自然不生硬，【十二法则】了解一下 逐帧动画 定格动画，又名逐帧动画，是一种动画技术，其原理即将每帧不同的图像连续播放，从而产生动画效果。 两个条件：（1）相关联的不同图像，即动画帧；（2）连续播放。 三种技术（视频可以实现所有类型的动画，暂不纳入）：gif、JavaScript、CSS3 Animation。 一、gif 优点：成本较低、使用方便。 缺点：画质上，gif 支持颜色少(最大256色)、Alpha 透明度支持差，图像锯齿毛边比较严重；交互上，不能直接控制播放、暂停、播放次数，灵活性差；性能上，gif 会引起页面周期性的 paint ，性能较差。在触屏页中，gif 常被用来做加载动画。如《陌陌不孤独饭局》的加载动画：二、JS JS 与 CSS3，一般是将动画帧放到背景图中。不同的是， JS 是使用脚本来控制动画的连续播放的：可以直接改变元素的 background-image【序列图片视频化-查看demo】，也可以将动画帧合并成雪碧图，通过改变 background-position 来实现（即不同帧数用不同class的加载图片，使用 JS 改变样式名：） 优点:兼容性佳，交互灵活。 三、CSS3 Animation【查看demo】 也可以将动画帧合并成雪碧图，通过改变 background-position 来实现,CSS3 实际上是使用 animation-timing-function 的阶梯函数 steps(number_of_steps, direction) 来实现逐帧动画的连续播放的。 在移动端，CSS3 Animation 兼容性良好，相对于 JS，CSS3 逐帧动画使用简单，且效率更高，因为许多优化都在浏览器底层完成。 CSS3 animation属性中的steps功能符深入介绍 3D动画【查看demo】 3D变换相较2D变换，坐标系中多了Z轴，也就意味着物体除了上下左右，还可以前后移动。而rotate在2D中的旋转方式，在3D中与rotateZ相当。 CSS3中的perspetive在这样一个体系里就代表着元素与观者之间的距离，形象点说，就是元素3D效果的强度。CSS3中的3D效果消失点固定，变化的是观者与元素之间的距离。不过perspective数值与3D效果强度是成反比的，数值越大，元素的3D效果越不明显——2000px的视点意味着你看的是远方的物体，而100px则意味着这个物体就在你眼前【查看demo】 将3D效果数量控制在一定范围内，页面性能才是重中之重 动画性能 避免为开销大的属性设置动画，要让每次在设置动画时必须注意保持 60fps。 12 fps：由于人类眼睛的特殊生理结构，如果所看画面之帧率高于每秒约10-12帧的时候，就会认为是连贯的 24 fps：有声电影的拍摄及播放帧率均为每秒24帧，对一般人而言已算可接受 30 fps：早期的高动态电子游戏，帧率少于每秒30帧的话就会显得不连贯，这是因为没有动态模糊使流畅度降低 60 fps：在实际体验中，60帧相对于30帧有着更好的体验 85 fps：一般而言，大脑处理视频的极限 页面渲染的一般过程为JS &gt; CSS &gt; 计算样式 &gt; 重排 &gt; 重绘 &gt; 渲染层合并。 其中，Layout(重排)和Paint(重绘)是整个环节中最为耗时的两环，所以我们尽量避免这两个环节。从性能方面考虑，最理想的渲染流水线是没有布局和绘制环节的，只需要做渲染层的合并即可。 在实际的应用里，最为简单的一个注意点就是，触发动画的开始不要用diaplay:none属性值，因为它会引起Layout、Paint环节，通过切换类名就是一种很好的办法。 简介svg 指可缩放矢量图形是基于可扩展标记语言（标准通用标记语言的子集），用于描述二维矢量图形的一种图形格式。在 2003 年一月，SVG 1.1 被确立为 W3C 标准。 canvas 指在HTML5中新增的标签用于在网页实时生成图像，并且可以操作图像内容，基本上它是一个可以用JavaScript操作的位图（bitmap）。2014年10月29日，万维网联盟宣布，经过接近8年的艰苦努力，该标准规范终于制定完成。 能做什么？svg 【查看demo】 SVG 文件可以直接插入网页，成为 DOM 的一部分，然后用 JavaScript 和 CSS 进行操作。&lt;svg width=&quot;200&quot; height=&quot;200&quot;&gt; &lt;rect x=&quot;50&quot; y=&quot;25&quot; width=&quot;100&quot; height=&quot;50&quot; fill=&quot;#4284ed&quot;&gt;&lt;/rect&gt; &lt;/svg&gt; SVG 代码也可以写在一个独立文件中，然后用&lt;img&gt;、&lt;object&gt;、&lt;embed&gt;、&lt;iframe&gt;等标签插入网页。&lt;img src=&quot;circle.svg&quot;&gt; &lt;object id=&quot;object&quot; data=&quot;circle.svg&quot; type=&quot;image/svg+xml&quot;&gt;&lt;/object&gt; &lt;embed id=&quot;embed&quot; src=&quot;icon.svg&quot; type=&quot;image/svg+xml&quot;&gt; &lt;iframe id=&quot;iframe&quot; src=&quot;icon.svg&quot;&gt;&lt;/iframe&gt; CSS 也可以使用 SVG 文件。background: url(icon.svg); SVG 文件还可以转为 BASE64 编码，然后作为 Data URI 写入网页。&lt;img src=&quot;data:image/svg+xml;base64,[data]&quot;&gt; 矩形 &lt;rect&gt; x 属性定义矩形的左侧位置（例如，x=”0” 定义矩形到浏览器窗口左侧的距离是 0px） y 属性定义矩形的顶端位置（例如，y=”0” 定义矩形到浏览器窗口顶端的距离是 0px） 圆形 &lt;circle&gt; cx和cy属性定义圆点的x和y坐标。如果省略cx和cy，圆的中心会被设置为(0, 0) r属性定义圆的半径 椭圆 &lt;ellipse&gt; rx属性定义的水平半径 ry属性定义的垂直半径 线 &lt;line&gt; x1 属性在 x 轴定义线条的开始 y1 属性在 y 轴定义线条的开始 x2 属性在 x 轴定义线条的结束 y2 属性在 y 轴定义线条的结束 折线 &lt;polyline&gt;（不闭合） points 属性定义折线每个点的 x 和 y 坐标 多边形 &lt;polygon&gt;（闭合） points 属性定义多边形每个角的 x 和 y 坐标 路径 &lt;path&gt; M = moveto L = lineto H = horizontal lineto V = vertical lineto C = curveto S = smooth curveto Q = quadratic Bézier curve T = smooth quadratic Bézier curveto A = elliptical Arc Z = closepath 图片 &lt;image&gt; x=”图像的左上角的x轴坐标” y=”图像的左上角的y轴坐标” width=”图像的宽度”. 必须. height=”图像的高度”. 必须. xlink:href=”图像的路径”. 必须. 文本&lt;text&gt; 样式&lt;标签属性&gt; stroke stroke-width stroke-linecap stroke-dasharray fill 样式 style 属性用来定义 CSS 属性 CSS 的 fill 属性定义矩形的填充颜色（rgb 值、颜色名或者十六进制值） CSS 的 fill-opacity 属性定义填充颜色透明度（合法的范围是：0 - 1） CSS 的 stroke-opacity 属性定义轮廓颜色的透明度（合法的范围是：0 - 1） canvas【查看demo】创建画布 &lt;canvas id=&quot;canvas&quot; width=&quot;200&quot; height=&quot;100&quot;&gt;您的浏览器不支持 HTML5 canvas 标签。&lt;/canvas&gt; js初始化 let c=document.getElementById(&quot;canvas&quot;); let ctx=c.getContext(&quot;2d&quot;); 在使用canvas前，用canvas.getContext来测试浏览器是否支持canvas if (canvas.getContext) { console.log(&apos;你的浏览器支持canvas!&apos;); } else { console.log(&apos;你的浏览器不支持canvas!&apos;); } canvas坐标 canvas 是一个二维网格。 canvas 的左上角坐标为 (0,0) canvas - 矩形 rect(x,y,width,height); stroke() 或者 fill() canvas - 圆 beginPath() arc(x,y,r,start,stop) stroke() canvas - 线条 moveTo(x,y) 定义线条开始坐标 lineTo(x,y) 定义线条结束坐标 然后使用 stroke() 方法来绘制线条 canvas - 文本 font - 定义字体 fillText(text,x,y) - 在 canvas 上绘制实心的文本 strokeText(text,x,y) - 在 canvas 上绘制空心的文本 canvas - 图像【查看demo】 drawImage(image,x,y) canvas模糊解决方法，将画布尺寸设为显示尺寸的2倍 canvas.setAttribute(&apos;width&apos;, x * 2); canvas.setAttribute(&apos;height&apos;, y * 2); canvas.style.width = x + &apos;px&apos;; canvas.style.height = y + &apos;px&apos;; 优缺点svg 不依赖分辨率 支持事件处理器 最适合带有大型渲染区域的应用程序（比如谷歌地图） 复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快） 不适合游戏应用 生成的是矢量图。 SVG的本质特征，或者称为立世之本就是矢量可缩放（如论如何缩放，图像边缘都是平滑的） canvas 依赖分辨率 不支持事件处理器 弱的文本渲染能力 能够以 .png 或 .jpg 格式保存结果图像 最适合图像密集型的游戏，其中的许多对象会被频繁重绘 生成的是标量图。 制作动画的几个基本要求【查看demo】 各种方式的（svg,canvas,css3）动效原理比如canvas就是不断清除画布再绘制，清除再绘制，js,css3的浏览器引起的重排重绘等 JS基本功js的复杂度肯定会随着动画的复杂度提升。例如，了解实例对象的属性如何获取，以及上下文this指代什么；如何有效地遍历以及数据存储等等。 动画算法了解下贝塞尔曲线cubic-bezier(&lt;x1&gt;, &lt;y1&gt;, &lt;x2&gt;, &lt;y2&gt;)了解一下，如css3 animation transition的速度曲线函数。 动画相关APIcanvas,svg绘制线条，绘制圆，绘制不规则图形；如何描边，如何填充，如何控制透明度等等。css3 animation transition 各参数含义等。 常见的曲线函数【查看demo】通常而言，常见的图形绘制，或者运动轨迹之类，都是需要借助数学函数的。也就是要有一定的数学功力，无论是css3 transform变幻还是我们平时所见的各种动画效果，其本质上都是数学函数运动和矩阵变换，因此，要想再图形可视化以及视觉动效领域有所建树，数学不能差。 应用svg1、借助SVG文字尺寸自动缩放甚至突破Chrome 12px限制【查看demo】知识点：viewBox=&quot;x, y, width, height&quot; // x:左上角横坐标，y:左上角纵坐标，width:宽度，height:高度具体细节见：理解SVG viewport,viewBox,preserveAspectRatio缩放 2、制作图标【查看demo】SVG在既能满足现有图片的功能的前提下，又是矢量图，在可访问性上面也非常不错，并且有利于SEO和无障碍，在性能和维护性方面也比icon font要出色许多，总之大家可以根据项目实际情况去尝试使用。了解一下 适用于场景：一些需要尺寸自适应的slogon内容就很实用，例如移动端320~414宽度间的自适应。 3、css3 clip-path + svg animation 实现图片切换动画【查看demo】canvas1、使用canvas实现和HTML5 video交互的弹幕效果总结考虑到兼容性的问题，在项目实践中，一般我们在桌面浏览器端任然推荐使用JavaScript直接实现动画的方式或SVG动画的实现方式，移动端则可以考虑使用CSS3 、canvas或requestAnimationFrame。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>svg</tag>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网页无障碍访问知识集]]></title>
    <url>%2F2018%2F06%2F21%2Faccessibility-web%2F</url>
    <content type="text"><![CDATA[WAI-ARIA指无障碍网页应用。主要针对的是视觉缺陷，失聪，行动不便的残疾人以及假装残疾的测试人员。 ARIA常用属性role=&#39;button&#39;表示按钮所以平时最好不能用div和span来模拟按钮，因为会失去键盘可访问性如若要 则需要加上role=&#39;button&#39;，tabindex=0aria-hidden字符串。可选值为true和false, true表示元素隐藏(不可见)，false表示元素可见aria-expanded 展开还是收起，菜单，自定义下拉等用的比较多。aria-checked 选中还是未选。aria-selected 选中还是未选。aria-disabled 禁用还是可用。aria-invalid 验证正确还是错误。其余属性可见张大大的博客]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js-tips]]></title>
    <url>%2F2018%2F06%2F19%2Fjs-tips%2F</url>
    <content type="text"><![CDATA[常用的一些js小技巧，收录中… 一、算法q1:判断一个单词是否为回文 回文是指把相同的词汇或句子，在下文中调换位置或颠倒过来，产生首尾回环的情趣，叫做回文，也叫回环 核心代码： function checkPalindrom(str) { return str === str.split(&apos;&apos;).reverse().join(&apos;&apos;); } q2：数组去重es6实现： var new_arr = [...new Set(old_arr)]; es5实现： var reNewArr = function(arr) { let new_arr = []; for (let i = 0, len = arr.length; i &lt; len; i++) { if (!(new_arr.indexOf(arr[i]) &gt; -1)) { new_arr.push(arr[i]); } } return new_arr; } q3：排序算法冒泡排序： function bubbleSort(arr){ if(arr.length&lt;=1) { return arr; } for (let i = 0, len = arr.length; i &lt; len - 1; i++) { for (let j = i + 1; j &lt; len; j ++) { if (arr[i] &lt; arr[j]) { // 此处控制升序或者降序 let item = arr[i]; arr[i] = arr[j]; arr[j] = item; } } } return arr; } 快速排序： function quickSort(arr) { if(arr.length&lt;=1) { return arr; } let left_arr = [], right_arr = [], q = arr[0], len = arr.length; for (let i = 1; i &lt; len; i++){ if(arr[i] &gt; q) { // 此处控制升序或者降序 right_arr.push(arr[i]) } else { left_arr.push(arr[i]) } } return [].concat(quickSort(left_arr),[q],quickSort(right_arr)); }]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于颜色的按钮UI组件生成]]></title>
    <url>%2F2018%2F06%2F14%2Fcolor-btns%2F</url>
    <content type="text"><![CDATA[按钮作为网页设计中的一名常客，游走于pc和移动端，基于状态和基于颜色会有什么不同呢？ 本文参考来源于-http://www.zhangxinxu.com/wordpress/2016/11/development-ui-component-based-on-css-color/ 基于状态的按钮参考微信中的设计-https://weui.io/#buttonhtml: &lt;a href=&quot;#&quot; class=&quot;weui_btn weui_btn_primary&quot;&gt;按钮&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;weui_btn weui_btn_warn&quot;&gt;确认&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;weui_btn weui_btn_default&quot;&gt;按钮&lt;/a&gt; css: .weui-btn { position: relative; display: block; margin-left: auto; margin-right: auto; padding-left: 14px; padding-right: 14px; box-sizing: border-box; font-size: 18px; text-align: center; text-decoration: none; color: #FFFFFF; line-height: 2.55555556; border-radius: 5px; overflow: hidden; } .weui-btn_primary { background-color: #1aad19; } .weui-btn_default { color: #000000; background-color: #F8F8F8; } .weui-btn_warn { background-color: #E64340; } 实例：按钮 确认 按钮 基于状态的区分ui组件，在语义上是非常明确的，但是对应css代码，则显得异常冗长 基于颜色的按钮1.设定颜色color.dark { color: #33373d; } .gray { color: #969ba3; } .blue { color: #4284ed; } .green { color: #7ed321; } .orange { color: #f0643a; } .yellow { color: #f0c53a; } .purple { color: #a091ff; } .red { color: #ed424b; } .white { color: #fff; } 2.基于color设置按钮样式记住border边框默认是color的颜色，currentColor变量也指当前字体颜色colorcss如下： .ning-btn { font-size: 14px; display: inline-block; padding: .179rem 1em; text-align: center; border: 1px solid; border-radius: 2px; background-color: currentColor; } 然后你会发现按钮的字体颜色不是和背景颜色一样了吗，岂不是成为了一个纯色按钮块这时，请出我们的::first-line,因为常规的按钮上只有一行文字 .ning-btn::first-line { color: #fff; } 3.根据font-size控制按钮尺寸._xs { font-size: 12px; } ._sm { font-size: 14px; } ._md { font-size: 16px; } ._lg { font-size: 18px; } 4.兼容性保证currentColor不兼容低版本浏览器的话，直接同时设定.dark { background-color: #33373d; color: #33373d; } 对于容易产生冲突的的附属类名，添加一个前缀，比如._dark { background-color: #33373d; color: #33373d; }，约定带通用前缀的代码是不能单独使用的。最终实现如下： &lt;a href=&quot;#&quot; class=&quot;ning-btn _xs _white&quot;&gt;小的白色按钮&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;ning-btn _sm _blue&quot;&gt;正常蓝色按钮&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;ning-btn _md _yellow&quot;&gt;中等黄色按钮&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;ning-btn _lg _purple&quot;&gt;大的紫色按钮&lt;/a&gt; 小的白色按钮 正常蓝色按钮 中等黄色按钮 大的紫色按钮 结语本策略能够实现的重点技巧就是利用::first-line伪元素的文字控色技术所以也仅限用于只有一行文字的按钮]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js-设计模式]]></title>
    <url>%2F2018%2F06%2F11%2Fjs-design-mode%2F</url>
    <content type="text"><![CDATA[36个设计模式 面向对象编程类的实现(es5)var Book = function(name) { var id = 1; // 私有变量 var getId = function() { console.log(id) }; // 私有方法 this.name = name; // 公有变量 this.setName = function(name) { this.name = name; } // 公有方法 } Book.prototype = { price: 100, // 静态公有属性 getPrice: function() { console.log(this.price); } // 静态公有方法 } 闭包是有权访问另外一个函数作用域中变量的函数，即在一个函数内部创建另一个函数 简单工厂模式]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css-tips]]></title>
    <url>%2F2018%2F06%2F08%2Fcss-tips%2F</url>
    <content type="text"><![CDATA[常用的一些css小技巧，收录中… tips1:改变滚动条样式/*滚动条样式*/ .scrollbar::-webkit-scrollbar {/*滚动条整体样式*/ width: 4px; /*高宽分别对应横竖滚动条的尺寸*/ height: 4px; } .scrollbar::-webkit-scrollbar-thumb {/*滚动条里面小方块*/ border-radius: 5px; -webkit-box-shadow: inset 0 0 5px rgba(0,0,0,0.2); background: rgba(0,0,0,0.2); } .scrollbar::-webkit-scrollbar-track {/*滚动条里面轨道*/ -webkit-box-shadow: inset 0 0 5px rgba(0,0,0,0.2); border-radius: 0; background: rgba(0,0,0,0.1); } tips2:超出2行显示省略号….elis-2{ overflow:hidden; //超出的文本隐藏 text-overflow:ellipsis; //溢出用省略号显示 display:-webkit-box; //将对象作为弹性伸缩盒子模型显示。 -webkit-box-orient:vertical; //从上到下垂直排列子元素（设置伸缩盒子的子元素排列方式） -webkit-line-clamp:2; //这个属性不是css的规范属性，需要组合上面两个属性，表示显示的行数。 } tips3:content换行技术实现loading点点点效果html代码: 上传中&lt;dot&gt;...&lt;/dot&gt; css代码： dot { display: inline-block; height: 1em; line-height: 1; text-align: left; vertical-align: -.25em; overflow: hidden; } dot::before { display: block; content: &apos;...\A..\A.&apos;; white-space: pre-wrap; /* 也可以是white-space: pre */ animation: dot 3s infinite step-start both; } @keyframes dot { 33% { transform: translateY(-2em); } 66% { transform: translateY(-1em); } } 个人感觉关键还是在于animation中的step属性,能实现分段动画的效果。实例： 上传中… tips4:css中的单位 单位 含义 em 相对于父元素的字体大小 ex 相对于小写字母”x”的高度 px 相对于屏幕分辨率而不是视窗大小：通常为1个点或1/72英寸 in inch, 表英寸 cm centimeter, 表厘米 mm millimeter, 表毫米 pt 1/72英寸 pc 12点活字，或1/12点 % 相对于父元素。正常情况下是通过属性定义自身或其他元素 pxpx为绝对单位，即基于物理像素的单位。 emem为相对单位，指的是基于当前元素的字体大小的单位。比如元素font-size:10px，那么10em等于100px。 remrem也是相对单位，指的是基于根元素(html)字体大小的单位。比如根元素font-size:10px，那么10rem等于100px。主要应用于移动端的尺寸自适应布局。 excss中的一个相对单位，指的是字母x的高度，即x-height，而x的高度会受字体的影响。应用：不受字体和字号影响的内联元素的垂直居中对齐效果原理：内联元素默认是基线对齐，而基线就是x的底部，1ex就是一个x的高度，此时我们设置图标的大小为1ex，图标内背景图居中，文字与图标则可以水平垂直居中。css代码： .icon-arrow { display: inline-block; width: 20px; height: 1ex; background: url(arrow-down.png) no-repeat center; } 实例： 水平垂直居中图标 css-tipscss3实现：display: flex; align-items: center;##### ch也是一个相对单位，1ch 表示一个 0 字符的宽度，所以 6 个 0 所占据的宽度就是 6ch。应用的话，主要是配合等宽字体。##### tips5:css画三角形的几种方式###### 1、border实现这个应该属于基本操作了，直接上代码css代码: .border-triangle{ width: 0; height: 0; border: 10px solid; border-color: #0081fe transparent transparent transparent; // 注意你想要那个朝向的三角形，则只需写与之相反方向的颜色即可 }###### 2、clip-path polygon图形构建css代码: .clip-triangle{ display: inline-block; width: 20px; height: 20px; background-color: currentColor; clip-path: polygon(5px 10px, 16px 3px, 16px 17px); }以上所有三角形实例： border-triangle clip-triangle 字体定义顺序字体定义顺序是一门学问，通常而言，我们定义字体的时候，会定义多个字体或字体系列。举个栗子： body { font-family: tahoma, arial, &apos;Hiragino Sans GB&apos;, &apos;\5b8b\4f53&apos;, sans-serif; } 别看短短 5 个字体名，其实其中门道很深。解释一下： 使用 tahoma 作为首选的西文字体，小字号下结构清晰端整、阅读辨识容易；用户电脑未预装 tohoma，则选择 arial 作为替代的西文字体，覆盖 windows 和 MAC OS；Hiragino Sans GB 为冬青黑体，首选的中文字体，保证了 MAC 用户的观看体验；Windows 下没有预装冬青黑体，则使用 ‘\5b8b\4f53‘ 宋体为替代的中文字体方案，小字号下有着不错的效果；最后使用无衬线系列字体 sans-serif 结尾，保证旧版本操作系统用户能选中一款电脑预装的无衬线字体，向下兼容。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pixi]]></title>
    <url>%2F2018%2F05%2F31%2Fpixi%2F</url>
    <content type="text"><![CDATA[Pixi.js是一款超快的开源HTML5 2D渲染引擎，使用带有Canvas回调功能的WebGL]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sublime-注册码]]></title>
    <url>%2F2018%2F05%2F31%2Fsublime-license%2F</url>
    <content type="text"><![CDATA[sublime text3 3161 注册码 —– BEGIN LICENSE —– Country Rebel Single User License EA7E-993095 19176BCE 3FF86EA0 3CE86508 6BE4DCA7 9F74D761 4D0CAD8B E4033008 43FC73F3 1C01F6DD C4829BE9 E7830578 A4823ADC 61B224F1 DC93C458 ABAAAE0F 925C32D4 04A83C36 813FF6C8 9877942C 4418F99C 2F15E5B8 544EDB80 D9A86985 4CBBA6A8 998DE3E4 7FB33E15 6CD30357 6DC96CEA ECB1BC4E D8010D5A 77BA86C8 BA7F76CC —— END LICENSE ——]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markDown语法]]></title>
    <url>%2F2018%2F05%2F30%2Fmark-down%2F</url>
    <content type="text"><![CDATA[它实际上是个非常简单、非常容易学习的排版语法 一、标题# 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 二、列表1、无序列表 item1 item2 item3 2、有序列表 item1 item2 item3 三、引用 这里是引用 四、图片和链接1、插入链接百度 2、插入图片 五、粗体、斜体、删除线这是粗体这是斜体这是删除线 六、表格 Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 七、代码块.post-title { margin-bottom: 20px; font-size: 28px; text-align: center; } 八、代码框npm i react -g\这是单行代码\ 九、分割线 其实markdown也支持与html混用应该能做出一些炫酷的效果不知道支不支持css(js模板引擎生成的html里可以引入css)]]></content>
      <categories>
        <category>写作</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CssWorld-笔记]]></title>
    <url>%2F2018%2F05%2F29%2Fcss-world%2F</url>
    <content type="text"><![CDATA[茫茫星海中鲸鱼永不犯错的航行， 那是因为有星辰的指引; 芸芸CSS世界中想要不断突破瓶颈， 需要有本书的指引。 概述 CSS 世界的诞生就是为图文信息展示服务的 文档流的概念CSS世界构建的基石是HTML，而HTML最具代表的两个基石&lt;div&gt;和&lt;span&gt;正好是CSS世界中块级元素和内联级元素的代表，它们对应的正是图 1-3 所示的盛水容器中的水和木头，其特性表现也正如现实世界的水和木头，如图 1-4 所示。 常见术语先看一段css代码 p{ color: #999; } 属性即上面的color 值值大多与数字挂钩 整数值，如 z-index:1 中的 1，属于&lt;integer&gt;，同时也属于&lt;number&gt;。 数值，如 line-height:1.5 中的 1.5，属于&lt;number&gt;。 百分比值，如 padding:50%中的 50%，属于&lt;percent&gt;。 长度值，如 99px。 颜色值，如#999，red。 流、元素与基本尺寸块级元素基本特征，也就是一个水平流上只能单独显示一个元素，多个块级元素则换行显示块级元素 不等于 display:block，list-item,table也是块级元素按照常规理解，css中的每个元素都会生成一个盒子，比如：内联元素-&gt;内联盒子和块级元素-&gt;块级盒子其实，是每个元素会生成两个盒子，外在盒子（控制内联或者块级）和容器盒子（即盒子模型）比如：display: inline-block外在盒子就由inline控制，所以可以和内联元素一行显示而内容盒子就由block控制，所以可以设置宽高如果遵循这种理解display:block应该脑补成 display:block-blockdisplay:table应该脑补成 display:block-table由display: inline-block可以看出，width和height作用在内容盒子上而内容盒子又分为4个盒子，分别是 content box、padding box、border box和 margin box content box 环绕着 width 和 height 给定的矩形（CSS2.1规范） 所以默认的宽度作用在容器盒子的content box上引出css3属性 box-sizingtips: margin-box的背景色永远是透明的 content 内容替换技术 tips幽灵空白节点具体指的是：在 HTML5 文档声明中，内联元素的所有解析和渲染表现就如同每个行框盒子的前面有一个“空白节点”一样。tips:有一个前提，文档声明必须是 HTML5 文档声明（HTML 代码如下），如果还是很多年前的老声明，则不存在“幽灵空白节点”。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo-博客搭建记]]></title>
    <url>%2F2018%2F05%2F29%2Finit-blog%2F</url>
    <content type="text"><![CDATA[搭建博客，构思已久。却停滞于行动，此次趁着受人之托，得以窥见其中一二 本文参考来源于–【hexo搭建博客最全攻略】–【手把手教 GitHub + Hexo 搭建博客】 一、环境准备需要node git github账号，于各自网站安装即可。 二、安装Hexostep1:全局安装hexo$ npm i hexo-cli -g step2:进入指定目录初始化hexo项目# 创建hexo文件夹 $ mkdir hexo # 进入hexo文件夹 $ cd hexo # 初始化hexo $ hexo init # 安装依赖包 $ npm install # 部署到本地(调试使用) 简写 hexo s $ hexo server # 先运行上面的命令，再在浏览器输入localhost:4000即可 # 问题：执行hexo server提示找不到该指令 # 解决办法：在Hexo 3.0 后server被单独出来了，需要安装server，安装的命令如下： $ npm install hexo -server --save step3:将本地hexo项目与github远程仓库关联进入github新建Repositorie注意Repositorie的名字一定要满足your Account Name/your Account Name.github.io以上配置完成后保存 然后回到终端执行 #安装一个插件，这样才能将你写好的文章部署到github服务器上并让别人浏览到。 npm install hexo-deployer-git --save #安装完成后在终端中依次执行如下代码(为了简单后续统称为三步) #清理缓存 hexo clean #进行渲染 简写 hexo g hexo generate #调试完毕后使用 简写为 hexo d来部署到git服务器 hexo deploy 之后每次更新代码或者文档都需要重新部署 将这里的三步重新执行一次其实我们可以在hexo项目的根目录下 新建一个node命令来整合这三步 &quot;scripts&quot;: { &quot;build&quot;: &quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d&quot; } 之后每次更新在终端执行npm run build即可 执行完以上操作后打开浏览器地址了输入http://你github名字.github.io就可以看到效果~ 三、更换主题切换 Hexo 主题非常容易，您只要在 themes 文件夹内，git clone 你喜欢的主题并修改 _config.yml 内的 theme 设定，即可切换主题…… 四、自定义主题创建 Hexo 主题非常容易，您只要在 themes 文件夹内，新增一个任意名称的文件夹然后参考更换主题步骤不过还是建议在已有的主题上进行个性化的修改，站在巨人的肩膀也是极好的~ tips新建文章hexo new post “文章名字” 字数统计&amp;阅读时长在根目录下安装 hexo-wordcount,运行：npm i hexo-wordcount --save在需要用到的地方添加 wordcount(page.content) min2read(post.content) 即可]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
